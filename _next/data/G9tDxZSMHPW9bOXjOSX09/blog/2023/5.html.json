{"pageProps":{"postData":{"birthtime":"2023-05-02T01:32:57.638Z","mtime":"2023-05-02T01:32:57.638Z","slug":"2023/5","wordCount":1578,"contentHtml":"<p>我们把 Next.js 网站搭建好后，就可以把网站内容部署到网络上的静态空间了。在这里我选择的平台是 GitHub Pages 为我的网站进行托管，使用 GitHub Pages 的好处就不需要我多说了。</p>\n<h2>自动部署的好处</h2>\n<p>如果我们的 Next.js 项目不进行配置自动部署，那么我们每次写一篇文章，发布一篇文章的时候，就需要重新打包生成静态页。要知道 Next.js 打包生成静态页的时候是比较花时间的，我刚开始搭建 Next.js 项目的时候，网站上没几篇文章，打包的时候也需要花费一段时间。</p>\n<p>在一个群里其中有一个群友，他有一个 Vuepress 项目，里面有 3100多 部法律法规的文章，包含 1600多 万字。根据他的描述，他打包花费了差不多一天的时间，大概是23个小时。</p>\n<p>可见我们给 Next.js 项目配置自动部署是多么的方便，它可以给我们省很多时间，一年换算下来是一个非常可观的一个数字。下面我就把 用 Next.js 自动将应用部署到 GitHub Pages 的成功案例分享给大家，希望可以对您有所帮助。</p>\n<h2>准备部署</h2>\n<p>在部署前要先了解一些基本的信息：</p>\n<ul>\n<li>1、默认情况下 Markdown 源文件是在你项目的 blog 目录里的；</li>\n<li>2、默认情况下 Next.js 网站打包生成的静态页文件会放在 out 目录里；</li>\n<li>3、Next.js 推荐使用 npm 作为包管理器，当然也可以使用 npm 或 yarn ；</li>\n<li>4、Next.js 作为项目依赖安装，并在 package.json 是配置了如下脚本： ；</li>\n</ul>\n<div class=\"remark-highlight\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"scripts\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"build\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"next build &#x26;&#x26; next export\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>在我的 package.json 文件里，我根据自己的情况对默认的配置进行了一点修改，我把默认的  <code>\"build\": \"next build\"</code> 改成了 <code>\"build\": \"next build &#x26;&#x26; next export\"</code> ，需要打包的时候可以直接用 <code>npm run build</code> 命令就可以打包了。你也可以根据自己的实际情况进行修改，当然了也可以不需要修改，直接使用默认的就好了。</p>\n<p>修改信息</p>\n<ul>\n<li>\n<ul>\n<li>4.1、可以把 <code>npm run build</code> 你想要的任何命令，这里随便你怎么改。</li>\n</ul>\n</li>\n<li>\n<ul>\n<li>4.2、<code>next build</code> 是 Next.js 提供的一个命令行工具，用于将 Next.js 应用程序构建为静态 HTML 文件和 JavaScript 文件的集合，以便在生产环境中进行部署。它会将应用程序的所有页面预渲染为静态 HTML 文件，以提高性能和搜索引擎优化。构建后的文件将存储在 <code>.next</code> 目录中。</li>\n</ul>\n</li>\n<li>\n<ul>\n<li>4.3、<code>next export</code> 是 Next.js 的一个命令，用于将 Next.js 应用程序导出为静态 HTML 文件。导出的静态文件存放在项目根目录的 out 文件夹里。</li>\n</ul>\n</li>\n<li>\n<p>5、在 GitHub Pages 上配置好仓库的相关设置，需要新建一个新分支用来存放静态页。</p>\n</li>\n</ul>\n<h2>仓库配置</h2>\n<p>1、在 GitHub 新建一个仓库（已经建有仓库的可以省略这一步骤），建立仓库后会自动生成一个名为 main 的默认主分支。这个分支我们用来存放 Next.js 项目的源码文件，包括我们的 md 文件也在里面。</p>\n<p>2、在这个仓库里再新建一个分支，我建立了一个名为 fanma 的分支。分支名你可以随便取，这个没什么要求。</p>\n<p>这样我们的 GitHub 仓库里就有了两个分支，其中 main 默认主分支用来存放项目的所有源码文件。另外一个分支 fanma 用下存放静态文件，也就是用来运行网站的文件。</p>\n<p>这样我们的仓库配置就基本完成了。</p>\n<h2>自动部署</h2>\n<p>在 GitHub Pages 托管平台上，我使用的是 GitHub Actions 来为 Next.js 项目搭建的网站来进行自动部署。</p>\n<p>1、在仓库默认主分支 main 根目录创建一个名为 .github 的文件夹，在 .github 文件夹里再创建一个 workflows 工作流文件夹，继续再这个 workflows 新建一个 fanma.yml 的文件。</p>\n<p>最终的文件路径为 .github/workflows/fanma.yml 完整的路径。</p>\n<p>其中 fanma.yml 的文件名是可以随便取的，只要 .yml 文件后缀不变就可以了。</p>\n<p>2、工作流文件 fanma.yml 配置如下：</p>\n<div class=\"remark-highlight\"><pre class=\"language-yml\"><code class=\"language-yml\"><span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> fanma\n\n<span class=\"token key atrule\">on</span><span class=\"token punctuation\">:</span> \n  <span class=\"token key atrule\">push</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">branches</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>main<span class=\"token punctuation\">]</span>\n  <span class=\"token key atrule\">workflow_dispatch</span><span class=\"token punctuation\">:</span>\n\n<span class=\"token key atrule\">jobs</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">docs</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">runs-on</span><span class=\"token punctuation\">:</span> ubuntu<span class=\"token punctuation\">-</span>latest\n\n    <span class=\"token key atrule\">steps</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">uses</span><span class=\"token punctuation\">:</span> actions/checkout@v3\n        <span class=\"token key atrule\">with</span><span class=\"token punctuation\">:</span>\n          <span class=\"token comment\"># “最近更新时间” 等 git 日志相关信息，需要拉取全部提交记录</span>\n          <span class=\"token key atrule\">fetch-depth</span><span class=\"token punctuation\">:</span> <span class=\"token number\">0</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Setup pnpm\n        <span class=\"token key atrule\">uses</span><span class=\"token punctuation\">:</span> pnpm/action<span class=\"token punctuation\">-</span>setup@v2\n        <span class=\"token key atrule\">with</span><span class=\"token punctuation\">:</span>\n          <span class=\"token comment\"># 选择要使用的 pnpm 版本</span>\n          <span class=\"token key atrule\">version</span><span class=\"token punctuation\">:</span> <span class=\"token number\">7</span>\n          <span class=\"token comment\"># 使用 pnpm 安装依赖</span>\n          <span class=\"token key atrule\">run_install</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span>\n\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Setup Node.js\n        <span class=\"token key atrule\">uses</span><span class=\"token punctuation\">:</span> actions/setup<span class=\"token punctuation\">-</span>node@v3\n        <span class=\"token key atrule\">with</span><span class=\"token punctuation\">:</span>\n          <span class=\"token comment\"># 选择要使用的 node 版本</span>\n          <span class=\"token key atrule\">node-version</span><span class=\"token punctuation\">:</span> <span class=\"token number\">18</span>\n          <span class=\"token comment\"># 缓存 pnpm 依赖</span>\n          <span class=\"token key atrule\">cache</span><span class=\"token punctuation\">:</span> pnpm\n\n      <span class=\"token comment\"># 运行构建脚本</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Build Next.js site\n        <span class=\"token key atrule\">run</span><span class=\"token punctuation\">:</span> npm run build\n\n      <span class=\"token comment\"># 查看 workflow 的文档来获取更多信息</span>\n      <span class=\"token comment\"># @see https://github.com/crazy-max/ghaction-github-pages</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Deploy to GitHub Pages\n        <span class=\"token key atrule\">uses</span><span class=\"token punctuation\">:</span> crazy<span class=\"token punctuation\">-</span>max/ghaction<span class=\"token punctuation\">-</span>github<span class=\"token punctuation\">-</span>pages@v2\n        <span class=\"token key atrule\">with</span><span class=\"token punctuation\">:</span>\n          <span class=\"token comment\"># 部署到 gh-pages 分支</span>\n          <span class=\"token key atrule\">target_branch</span><span class=\"token punctuation\">:</span> fanma\n          <span class=\"token comment\"># 部署目录为 VuePress 的默认输出目录</span>\n          <span class=\"token key atrule\">build_dir</span><span class=\"token punctuation\">:</span> out\n        <span class=\"token key atrule\">env</span><span class=\"token punctuation\">:</span>\n          <span class=\"token comment\"># @see https://docs.github.com/cn/actions/reference/authentication-in-a-workflow#about-the-github_token-secret</span>\n          <span class=\"token key atrule\">GITHUB_TOKEN</span><span class=\"token punctuation\">:</span> $<span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> secrets.GITHUB_TOKEN <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>上面就是我的工作流文件 fanma.yml 相关配置信息，现在已经是正常运行的，没有问题的。</p>\n<p>下面这三个配置，需要根据你自己的实际情况进行配置：</p>\n<div class=\"remark-highlight\"><pre class=\"language-yml\"><code class=\"language-yml\"><span class=\"token key atrule\">run</span><span class=\"token punctuation\">:</span> npm run build\n<span class=\"token key atrule\">target_branch</span><span class=\"token punctuation\">:</span> fanma\n<span class=\"token key atrule\">build_dir</span><span class=\"token punctuation\">:</span> out\n</code></pre></div>\n<h2>自动部署完成</h2>\n<p>到这里我们 Next.js 项目的自动部署就完成了，只要我们在本地新建文件或修改文件，进行 Push 就可以触发自动部署。</p>\n<p>现在我们就不需要在本地进行打包生成静态页了，只要把 md 文件写好，打包生成静态页就 Push 就交给 GitHub Actions 帮我们自动部署就可以了。</p>\n<h2>错误解决方案</h2>\n<p>在配置自动部署中会遇到一些问题，下面的一些错误解决应该可以帮助得到你。</p>\n<p>设置 GitHub Pages 工作流权限：\n<a href=\"/blog/2023/4.html\">Error The process '/usr/bin/git' failed with exit code 128</a></p>\n","title":"使用 Next.js 自动将应用部署到 GitHub Pages","date":"2023-03-16","category":"Next.js","tag":["部署","GitHub","Pages"],"head":[["meta",{"name":"keywords","content":"Next.js,自动部署,GitHub Actions"}]]}},"__N_SSG":true}